/**
	@page page_plugin Guide d'écriture de plug-ins
	
	Pour ajouter des fonctionnalités à i-score, il est recommandé d'utiliser une architecture en plug-ins.
	Pour ce faire, le mécanisme de plug-ins de Qt est utilisé : http://qt-project.org/doc/qt-5/plugins-howto.html
	
	Il est recommandé de s'inspirer des plug-ins existants. Voici en quelques mots les possibilités :
	 
	- Ajouter des panneaux latéraux
	- Définir un nouveau type de document
	- Définir des paramètres spécifiques au plug-in
	- Exécuter des actions avant / après certaines actions du coeur du logiciel
	- [spécifique à i-score] Ajouter des processus
	- [todo] Intégration à la bibliothèque
	 
	 
	@subsection Pour écrire un plug-in : 
	- Il faut hériter des classes du dossier interfaces/plugins dans une nouvelle classe,
	en fonction de ce que l'on veut que le plug-in implémente. 
	Ces classes sont des factory abstraites. 
	Cela veut dire qu'un plug-in peut offrir plusieurs panneaux par exemple.
	 
	- Il faut ensuite créer des implémentations qui vont correspondre aux interfaces des éléments 
	présents dans le dossier interfaces. 


	@section Hiérarchie
	
	- Une garantie est offerte aux développeurs de plug-ins : 
	tous les objets sont des enfants (avec potentiellement plusieurs niveaux hiérarchiques)
	de l'objet QApplication (pouvant être accédé par qApp).
	Les développeurs de plug-ins sont invités à suivre la même organisation
	en faisant en sorte que tous les objets issus de classes héritant de QObject 
	aient un parent bien défini, avec un niveau hiérarchique remontant 
	au moins à un élément de interfaces, ceux-là étant automatiquement placés dans 
	la hiérarchie du logiciel.
	 
	Cela a pour but de permettre à un plug-in ultérieur de rajouter d'autres fonctionnalités 
	à un plug-in existant sans pour autant nécessiter de modifier le plug-in existant.
	Il sera aussi important de documenter les signaux / slots disponibles.
	
	@section Autoconnection
	
	Un mécanisme d'auto-connection est fourni : il garanti qu'à chaque fois qu'un objet est créé, 
	et que cet objet vérifie soit le nom, soit une relation d'héritage avec un élément présent 
	dans les Autoconnect d'un plug-in, alors il est connecté.
	
	Cela fonctionne comme pour la connection de Qt, mais plutôt que de se faire par pointeur, elle se fait 
	par nom d'objet / relation d'héritage.
	
	Par exemple : 
	\code
	{{iscore::Autoconnect::ObjectRepresentationType::QObjectName, "ScenarioPresenter", SIGNAL(scenarioClicked())},
	 {iscore::Autoconnect::ObjectRepresentationType::Inheritance, "MyPluginObject", SLOT(displayUnicorns())}}
	\endcode
	 
	Spécifier cela dans les autoconnections du plug-in aura pour conséquence 
	de garantir que soient toujours connectés tout objet de nom ScenarioPresenter 
	à tout objet héritant de MyPluginObject, avec les signaux et slots spécifiés.
	
	Pour donner un nom à un objet, il faut utiliser setObjectName().
	Cependant, il y a un problème : 
	
	Prenons le cas : 
	\code
	class PrettyScenarioPresenter : public QObject
	{
		public:
			PrettyScenarioPresenter(QObject* parent) : QObject{parent}
			{
				setObjectName("ScenarioPresenter");
			}
	}
	\endcode
	
	Ici, le mécanisme d'auto-connection est déclenché dans le constructeur de 
	QObject car l'implémentation utilise les childEvent de Qt (un filtre est 
	installé sur l'objet QApplication). Il ne trouve donc pas l'objet puisque 
	setObjectName n'a pas encore été appliqué.
	
	Pour remédier à cela, il faut faire : 
	\code
	class A : public QObject
	{
		public:
			A(QObject* parent) : QObject{}
			{
				setObjectName("MonA");
				setParent(parent);
			}
	}
	\endcode
	Une class template simplifiant ce processus est présente dans QNamedType<T>.
	Des spécialisations sont offertes pour QObject, QWidget et QGraphicsObject. 

*/
