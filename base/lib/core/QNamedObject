#pragma once
#include <QObject>
#include <QWidget>
#include <QGraphicsObject>

////////////////////////////////////////////////
// This file contains utility algorithms & classes that can be used
// everywhere (core, plugins...)
////////////////////////////////////////////////
template<typename QType>
class QNamedType : public QType
{
	public:
		template<typename... Args>
		QNamedType(QType* parent, QString name, Args&&... args):
			QType{std::forward<Args>(args)...}
		{
			QType::setObjectName(name);
			QType::setParent(parent);
		}
};



using QNamedObject = QNamedType<QObject>;
using QNamedGraphicsObject = QNamedType<QGraphicsObject>;
using QNamedWidget = QNamedType<QWidget>;


class QIdentifiedObject : public QNamedObject
{
	public:
		template<typename... Args>
		QIdentifiedObject(QObject* parent, 
						QString name, 
						int id, 
						Args&&... args):
			QNamedObject{parent, 
						 name, 
						 std::forward<Args>(args)...},
			m_id{id}
		{
			
		}
		
		int id() const
		{
			return m_id;
		}
		
		void setId(int id)
		{
			m_id = id;
		}
		
	private:
		int m_id{};
};

////////////////////////////////////////////////
template<typename Container>
typename Container::value_type findById(const Container& c, int id)
{
	auto it = std::find_if(std::begin(c),
						   std::end(c),
						   [&id] (typename Container::value_type model)
							{
							  return model->id() == id;
							});
	
	if(it != std::end(c))
		return *it;
	
	return nullptr;
}


////////////////////////////////////////////////
#include <QApplication>
struct ObjectIdentifier
{
		QString child_name;
		int id;
};

class ObjectPath
{
	public:
		ObjectPath(const ObjectPath& obj) = default;
		ObjectPath(ObjectPath&&) = default;
		
		QString baseObject;
		std::vector<ObjectIdentifier> v;
		
		QObject* find()
		{
			QObject* obj = qApp->findChild<QObject*>(baseObject);
			
			for(auto it = v.begin(); it != v.end(); ++it)
			{
				auto childs = obj->findChildren<QIdentifiedObject*>(it->child_name, Qt::FindDirectChildrenOnly);
				
				auto elt = findById(childs, it->id);
				if(!elt) 
				{
					return nullptr;
				}
				
				obj = elt;
			}
			
			return obj;
		}
};
