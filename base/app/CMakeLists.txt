cmake_minimum_required(VERSION 3.0)

project(iscore_app)
set(APPNAME "i-score")
find_package(Qt5 5.2 REQUIRED COMPONENTS Core Widgets Network Xml)


set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/)

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../lib")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../lib/core")


set(JAMOMA_LIBS "Score;Modular;Foundation;DSP")
set(JAMOMA_PLUGINS "MIDI;Minuit;OSC;Automation;Scenario;Interval;Loop;AnalysisLib;DataspaceLib;FunctionLib;System;NetworkLib")
if(ISCORE_STATIC_PLUGINS)
	add_definitions(-DQT_STATICPLUGIN)
endif()

if(DEPLOYMENT_BUILD)
	add_executable(${APPNAME} WIN32 MACOSX_BUNDLE main.cpp)
else()
	add_executable(${APPNAME} WIN32 main.cpp)
endif()

target_link_libraries(${APPNAME} iscore_lib)
if(ISCORE_STATIC_PLUGINS)
	add_definitions(-DISCORE_STATIC_PLUGINS)
	target_link_libraries(${APPNAME}
		CurvePlugin
		inspector_plugin
		scenario_process
		pluginsettings_plugin
		device_explorer_plugin)

	if(TARGET networkplugin)
		add_definitions(-DISCORE_NETWORK)
		target_link_libraries(${APPNAME} networkplugin)
	endif()

	if(TARGET IScoreCohesion)
		add_definitions(-DISCORE_COHESION)
		target_link_libraries(${APPNAME} IScoreCohesion)
	endif()
else()
	if(APPLE AND DEPLOYMENT_BUILD)
		if(NOT ISCORE_STATIC_PLUGINS)
		# Copy iscore plugins into the app bundle
		add_custom_command(TARGET ${APPNAME} POST_BUILD
						   COMMAND mkdir -p ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)
		add_custom_command(TARGET ${APPNAME} POST_BUILD
						   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:CurvePlugin> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)
		add_custom_command(TARGET ${APPNAME} POST_BUILD
						   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:inspector_plugin> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)


		add_custom_command(TARGET ${APPNAME} POST_BUILD
						   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:scenario_process> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)

		add_custom_command(TARGET ${APPNAME} POST_BUILD
						   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:pluginsettings_plugin> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)
		add_custom_command(TARGET ${APPNAME} POST_BUILD
						   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:device_explorer_plugin> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)

		if(TARGET networkplugin)
			add_custom_command(TARGET ${APPNAME} POST_BUILD
							   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:networkplugin> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)
		endif()
		if(TARGET IScoreCohesion)
			add_custom_command(TARGET ${APPNAME} POST_BUILD
							   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:iscore_cohesion> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)
		endif()
		# TODO it's not a plugin. It should be copied to the MacOS folder instead.
		#add_custom_command(TARGET ${APPNAME} POST_BUILD
		#				   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:process_interface> ${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/)
		endif()
	endif()
endif()

install(TARGETS ${APPNAME}
		BUNDLE DESTINATION .
		RUNTIME DESTINATION .
		COMPONENT Runtime)


set(CPACK_PACKAGE_NAME "i-score")
set(CPACK_PACKAGE_VENDOR "i-score")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "An intermedia sequencer for the precise and flexible scripting of interactive scenarios.")
set(CPACK_PACKAGE_VERSION "0.3.0")
set(CPACK_PACKAGE_VERSION_MAJOR "0")
set(CPACK_PACKAGE_VERSION_MINOR "3")
set(CPACK_SOURCE_GENERATOR TGZ)
set(CPACK_SOURCE_PACKAGE_FILE_NAME "i-score")

if(DEPLOYMENT_BUILD)
	if(APPLE)
		find_package(Jamoma)
		# Copy the Jamoma files in the bundle generated by the build phase
		copy_in_bundle_jamoma(${APPNAME} ${CMAKE_BINARY_DIR}/${APPNAME}.app "${JAMOMA_LIBS}" "${JAMOMA_PLUGINS}")

		# Remember to set CMAKE_INSTALL_PREFIX on the CMake command line.
		# Qt setup
		include(DeployQt5)
		if(ISCORE_STATIC_PLUGINS) # For now we only take this branch
			foreach(plugin ${ISCORE_PLUGINS})
				list(APPEND ISCORE_BUNDLE_INSTALLED_PLUGINS ${APPNAME}.app/Contents/MacOS/plugins/lib${plugin}.dylib)
			endforeach()

			# We don't put the Jamoma path in here, because the paths get perverted by DeployQt5.
			install_qt5_executable(${APPNAME}.app "" "" "${CMAKE_BINARY_DIR}/base/lib")
		else()
			# TODO fix this.
			set(ISCORE_PLUGINS "device_explorer_plugin;inspector_plugin;scenario_process;CurvePlugin;iscore_cohesion;networkplugin;pluginsettings_plugin")

			foreach(plugin ${ISCORE_PLUGINS})
				list(APPEND ISCORE_BUNDLE_INSTALLED_PLUGINS ${APPNAME}.app/Contents/MacOS/plugins/lib${plugin}.dylib)
			endforeach()

			install_qt5_executable(${APPNAME}.app
								   ""
								   "${ISCORE_BUNDLE_INSTALLED_PLUGINS}"
								   "${CMAKE_BINARY_DIR};${CMAKE_BINARY_DIR}/plugins;${CMAKE_BINARY_DIR}/base/lib;${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/")
		endif()

		# After installation and fix-up by DeployQt5, we import the Jamoma libraries.
		# They are put in the RPATH.
		fixup_bundle_jamoma(${CMAKE_INSTALL_PREFIX}/${APPNAME}.app ${APPNAME} "${JAMOMA_LIBS}")
	elseif(UNIX)
		# use the LSB stuff if possible :)
		 EXECUTE_PROCESS(
		  COMMAND cat /etc/lsb-release
		  COMMAND grep DISTRIB_ID
		  COMMAND awk -F= "{ print $2 }"
		  COMMAND tr "\n" " "
		  COMMAND sed "s/ //"
		  OUTPUT_VARIABLE LSB_ID
		  RESULT_VARIABLE LSB_ID_RESULT
	   )
		 EXECUTE_PROCESS(
		  COMMAND cat /etc/lsb-release
		  COMMAND grep DISTRIB_RELEASE
		  COMMAND awk -F= "{ print $2 }"
		  COMMAND tr "\n" " "
		  COMMAND sed "s/ //"
		  OUTPUT_VARIABLE LSB_VER
		  RESULT_VARIABLE LSB_VER_RESULT
	   )

		if(NOT ${LSB_ID} STREQUAL "")
		  # found some, use it :D
		  set(INSTALLER_PLATFORM "${LSB_ID}-${LSB_VER}" CACHE PATH "Installer chosen platform")
		else(NOT ${LSB_ID} STREQUAL "")
		  set(INSTALLER_PLATFORM "linux-generic" CACHE PATH "Installer chosen platform")
		endif(NOT ${LSB_ID} STREQUAL "")

		set(CPACK_SYSTEM_NAME "${INSTALLER_PLATFORM}")

		if(${LSB_ID} STREQUAL "Debian" OR ${LSB_ID} STREQUAL "Ubuntu" OR ${LSB_ID} STREQUAL "Mint")
			set(CPACK_GENERATOR "DEB")
		else()
			set(CPACK_GENERATOR "TGZ")
		endif()

		install(PROGRAMS "${CMAKE_CURRENT_SOURCE_DIR}/i-score.sh"
				DESTINATION "."
				COMPONENT Runtime)

		set(CPACK_PACKAGE_FILE_NAME "i-score-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")
		set(CPACK_PACKAGING_INSTALL_PREFIX "")
		set(CPACK_DEBIAN_PACKAGE_MAINTAINER "i-score devs <i-score-devs@lists.sourceforge.net>")
		set(CPACK_DEBIAN_PACKAGE_DEPENDS "libqt5core5a, libqt5gui5, libqt5svg5, libqt5xml5, libqt5network5, libqt5printsupport5")
		set(CPACK_DEBIAN_PACKAGE_RECOMMENDS "jamomacore")
		set(CPACK_DEBIAN_PACKAGE_SECTION "sound")

	endif()
endif()
include(CPack)
