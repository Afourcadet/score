
# if(WIN32)


# include(DeployQt5)

# find_package(Jamoma)
# if(${Jamoma_FOUND})
#     # Copy the Jamoma files in the bundle generated by the build phase
#     copy_in_bundle_jamoma(${APPNAME} ${CMAKE_BINARY_DIR}/${APPNAME}.app "${JAMOMA_LIBS}" "${JAMOMA_PLUGINS}")
# endif()

# # Remember to set CMAKE_INSTALL_PREFIX on the CMake command line.
# # Qt setup
# include(DeployQt5)
# if(ISCORE_STATIC_PLUGINS) # For now we only take this branch
#     foreach(plugin ${ISCORE_PLUGINS})
#         list(APPEND ISCORE_BUNDLE_INSTALLED_PLUGINS ${APPNAME}.app/Contents/MacOS/plugins/lib${plugin}.dylib)
#     endforeach()

#     # We don't put the Jamoma path in here, because the paths get perverted by DeployQt5.
#     install_qt5_executable(${APPNAME}.app "" "" "${CMAKE_BINARY_DIR}/base/lib")
# else()
#     # TODO fix this.
#     set(ISCORE_PLUGINS "device_explorer_plugin;inspector_plugin;scenario_process;CurvePlugin;iscore_cohesion;networkplugin;pluginsettings_plugin")

#     foreach(plugin ${ISCORE_PLUGINS})
#         list(APPEND ISCORE_BUNDLE_INSTALLED_PLUGINS ${APPNAME}.app/Contents/MacOS/plugins/lib${plugin}.dylib)
#     endforeach()

#     install_qt5_executable(${APPNAME}.app
#                            ""
#                            "${ISCORE_BUNDLE_INSTALLED_PLUGINS}"
#                            "${CMAKE_BINARY_DIR};${CMAKE_BINARY_DIR}/plugins;${CMAKE_BINARY_DIR}/base/lib;${CMAKE_BINARY_DIR}/${APPNAME}.app/Contents/MacOS/plugins/")
# endif()


# if(${Jamoma_FOUND})
#     # After installation and fix-up by DeployQt5, we import the Jamoma libraries.
#     # They are put in the RPATH.
#     fixup_bundle_jamoma(${CMAKE_INSTALL_PREFIX}/${APPNAME}.app ${APPNAME} "${JAMOMA_LIBS}")
# endif()




# return()
# # Compiler Runtime DLLs
# if (MSVC)
#   # Visual Studio
#   set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP true)
#   include(InstallRequiredSystemLibraries)
#   install(FILES ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS} DESTINATION .)
# else()
#   # MinGW
#   get_filename_component(MINGW_DLL_DIR ${CMAKE_CXX_COMPILER} PATH)
#   install(FILES
#     "${MINGW_DLL_DIR}/libgcc_s_dw2-1.dll"
#     "${MINGW_DLL_DIR}/libstdc++-6.dll"
#     "${MINGW_DLL_DIR}/libwinpthread-1.dll"
#     DESTINATION .
#   )
# endif()

# # Qt Libraries
# if(CMAKE_BUILD_TYPE Matches "Debug")
# 	set(DEBUG_CHAR "d")
# else()
# 	set(DEBUG_CHAR "")
# endif()
# get_target_property(QtCore_LOCATION Qt5::Core LOCATION)
# get_filename_component(QT_DLL_DIR ${QtCore_LOCATION} PATH)
# install(FILES
#   "${QT_DLL_DIR}/icudt51.dll"
#   "${QT_DLL_DIR}/icuin51.dll"
#   "${QT_DLL_DIR}/icuuc51.dll"
#   "${QT_DLL_DIR}/Qt5Core${DEBUG_CHAR}.dll"
#   "${QT_DLL_DIR}/Qt5Gui${DEBUG_CHAR}.dll"
#   "${QT_DLL_DIR}/Qt5Widgets${DEBUG_CHAR}.dll"
#   "${QT_DLL_DIR}/Qt5Network${DEBUG_CHAR}.dll"
#   "${QT_DLL_DIR}/Qt5Xml${DEBUG_CHAR}.dll"
#   "${QT_DLL_DIR}/Qt5PrintSupport${DEBUG_CHAR}.dll"
#   "${QT_DLL_DIR}/Qt5Svg${DEBUG_CHAR}.dll"
#   "${QT_DLL_DIR}/Qt5Test${DEBUG_CHAR}.dll"
#   "${CMAKE_SOURCE_DIR}/win/qt.conf"
#   DESTINATION .
# )
# # Qt Platform Plugin
# install(FILES
#   "${QT_DLL_DIR}/../plugins/platforms/qwindows${DEBUG_CHAR}.dll"
#   DESTINATION plugins/platforms
# )


# 	# Qt stuff
# 	# if(CMAKE_BUILD_TYPE MATCHES Debug)
# 	# 	get_target_property(QtWinPlugin Qt5::QWindowsIntegrationPlugin LOCATION_Debug)
# 	# 	file(TO_CMAKE_PATH "C:\\Qt\\5.3\\msvc2013\\bin\\libEGLd.dll" LIBEGL_DLL)
# 	# elseif(CMAKE_BUILD_TYPE MATCHES Release)
# 	# 	get_target_property(QtWinPlugin Qt5::QWindowsIntegrationPlugin LOCATION)
# 	# 	file(TO_CMAKE_PATH "C:\\Qt\\5.3\\msvc2013\\bin\\libEGL.dll" LIBEGL_DLL)
# 	# endif()

# 	# install(FILES "${QtWinPlugin}" DESTINATION "${plugin_dest_dir}/platforms" COMPONENT Runtime)
# 	# install(FILES ${LIBEGL_DLL} DESTINATION bin COMPONENT Runtime)

# 	# # Libraries
# 	# file(TO_CMAKE_PATH "C:\\Qt\\5.3\\msvc2013\\bin" QT_FOLDER)
# 	# file(TO_CMAKE_PATH "C:\\Program Files (x86)\\libxml2-2.7.8.win32\\bin" LIBXML_FOLDER)
# 	# # Fuck this
# 	# file(TO_CMAKE_PATH "W:\\OSSIA_win\\Jamoma\\Core\\Foundation\\library\\libiconv\\bin" LIBICONV_FOLDER)
# 	# file(TO_CMAKE_PATH "C:\\Program Files (x86)\\zlib" ZLIB_FOLDER)

# 	# file(TO_CMAKE_PATH "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\redist\\x86\\Microsoft.VC120.CRT" MSVC_REDIST_RELEASE)
# 	# file(TO_CMAKE_PATH "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\redist\\Debug_NonRedist\\x86\\Microsoft.VC120.DebugCRT" MSVC_REDIST_DEBUG)

# 	# install(FILES "${MSVC_REDIST_RELEASE}/msvcr120.dll"
# 	# 			  "${MSVC_REDIST_RELEASE}/msvcp120.dll"
# 	# 			  "${MSVC_REDIST_DEBUG}/msvcr120d.dll"
# 	# 			  "${MSVC_REDIST_DEBUG}/msvcp120d.dll"
# 	# 		DESTINATION bin
# 	# 		COMPONENT Runtime)

# 	# Jamoma extensions
# 	file(TO_CMAKE_PATH "C:\\Program Files (x86)\\JamomaCore 0.6-dev\\lib\\jamoma" JAMOMA_EXTENSIONS_FOLDER)
# 	set(JAMOMA_EXTENSIONS
# 		"${JAMOMA_EXTENSIONS_FOLDER}/Scenario.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/Automation.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/Interval.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/OSC.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/Minuit.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/MIDI.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/AnalysisLib.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/DataspaceLib.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/FunctionLib.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/System.ttdll"
# 		"${JAMOMA_EXTENSIONS_FOLDER}/NetworkLib.ttdll")

# 	install(FILES ${JAMOMA_EXTENSIONS}
# 			DESTINATION bin
# 			COMPONENT Runtime)

# 	# Jamoma extensions also require their own DLLs.
# 	file(TO_CMAKE_PATH "C:\\Program Files (x86)\\Portmidi\\lib\\portmidi.dll" PORTMIDI_DLL)
# 	install(FILES ${PORTMIDI_DLL} DESTINATION bin COMPONENT Runtime)
# 	file(TO_CMAKE_PATH "C:\\Program Files (x86)\\pthread-win32\\dll\\x86\\pthreadVC2.dll" PTHREAD_DLL)
# 	install(FILES ${PTHREAD_DLL} DESTINATION bin COMPONENT Runtime)
# 	file(TO_CMAKE_PATH "C:\\Program Files (x86)\\Gecode\\bin" GECODE_DLL_FOLDER)

# 	if(CMAKE_BUILD_TYPE STREQUAL "Debug")
# 		set(GECODE_WIN32_BUILD_TYPE "d")
# 	else()
# 		set(GECODE_WIN32_BUILD_TYPE "r")
# 	endif()

# 	set(GECODE_DLLS
# 		"${GECODE_DLL_FOLDER}/GecodeDriver-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeFlatZinc-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeInt-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeFloat-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeGist-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeKernel-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeMinimodel-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeSet-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeSupport-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll"
# 		"${GECODE_DLL_FOLDER}/GecodeSearch-4-3-0-${GECODE_WIN32_BUILD_TYPE}-x86.dll")
# 	install(FILES ${GECODE_DLLS} DESTINATION bin COMPONENT Runtime)


# 	set(DIRS "${QT_FOLDER}" "${JAMOMA_LIB_FOLDER}/../bin" "${JAMOMA_LIB_FOLDER}" "${JAMOMA_EXTENSIONS_FOLDER}" "${LIBXML_FOLDER}" "${LIBICONV_FOLDER}" "${ZLIB_FOLDER}" )
# 	#~ set(DIRS ${QtCore_location} ${QtSvg_location} ${QtXml_location} ${QtNetwork_location} ${QtWidgets_location} ${QtPrintSupport_location})
# 	install(CODE "
# 					file(GLOB_RECURSE QTPLUGINS
# 					  \"\${CMAKE_INSTALL_PREFIX}/${plugin_dest_dir}/platforms/*${CMAKE_SHARED_LIBRARY_SUFFIX}\")
# 					  set(PLUGINS ${QTPLUGINS} ${JAMOMA_EXTENSIONS})
# 					include(BundleUtilities)
# 					fixup_bundle(\"${APPS}\"   \"${PLUGINS}\"   \"${DIRS}\")
# 				 "
# 			COMPONENT Runtime)

# 	# VC++ redistributable
# 	install(PROGRAMS "${CMAKE_CURRENT_SOURCE_DIR}/redist/vcredist_2010_x86.exe"
# 			DESTINATION redist)